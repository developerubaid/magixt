{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","rows","onChange","event","target","newText","toUpperCase","showAlert","disabled","length","toLowerCase","words","split","i","substring","join","navigator","clipboard","writeText","filter","element","defaultProps","navbarName","Alert","height","alert","word","lower","charAt","slice","Capitalize","msg","App","setAlert","message","setTimeout","switchMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ba0fb1f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            MAGIXT\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li> */}\r\n            </ul>\r\n\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Switch Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { navbarName: PropTypes.string };\r\n\r\nNavbar.defaultProps = { navbarName: \"Ubaid\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Upper Case Button was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text has be converted to Uppecase!\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    // console.log(\"Upper Case Button was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text has be converted to Lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleTitleClick = () => {\r\n    // console.log(\"Upper Case Button was clicked\" + text);\r\n    let words = text.split(\" \");\r\n    for (let i = 0; i < words.length; i++) {\r\n      words[i] =\r\n        words[i][0].toUpperCase() + words[i].substring(1).toLowerCase();\r\n    }\r\n    let newText = words.join(\" \");\r\n    setText(newText);\r\n    props.showAlert(\"Text has be converted to Title Case!\", \"success\");\r\n  };\r\n\r\n  const handleCapFirstWordClick = () => {\r\n    // console.log(\"Upper Case Button was clicked\" + text);\r\n    let newText = text[0].toUpperCase() + text.substring(1).toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\r\n      \"First Letter of sentence has been capitalized!\",\r\n      \"success\"\r\n    );\r\n  };\r\n\r\n  const handleCopyToClipboard = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Text copied!\", \"success\");\r\n  };\r\n  const handleClearClick = () => {\r\n    // console.log(\"Upper Case Button was clicked\" + text);\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text has been cleared!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Start typing here.\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3 my-4\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"textInput\"\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"black\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n            value={text}\r\n            rows=\"10\"\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-outline-primary mx-2 my-1 rounded-pill\"\r\n          onClick={handleUpClick}\r\n          disabled={text.length === 0}\r\n        >\r\n          Convert to Upper Case\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary mx-2 my-1 rounded-pill\"\r\n          onClick={handleLowClick}\r\n          disabled={text.length === 0}\r\n        >\r\n          Convert to Lower Case\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary mx-2 my-1 rounded-pill\"\r\n          onClick={handleTitleClick}\r\n          disabled={text.length === 0}\r\n        >\r\n          Convert to Title Case\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary mx-2 my-1 rounded-pill\"\r\n          onClick={handleCapFirstWordClick}\r\n          disabled={text.length === 0}\r\n        >\r\n          Capitalize 1st Word\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary mx-2 my-1 rounded-pill\"\r\n          onClick={handleCopyToClipboard}\r\n          disabled={text.length === 0}\r\n        >\r\n          Copy to Clipboard\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-danger mx-2 my-1 rounded-pill\"\r\n          onClick={handleClearClick}\r\n          disabled={text.length === 0}\r\n        >\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-5\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>Summery</h2>\r\n        <p>\r\n          <span className=\"fs-3\">\r\n            {\r\n              text.split(/\\s+/).filter((element) => {\r\n                return element.length !== 0;\r\n              }).length\r\n            }{\" \"}\r\n          </span>\r\n          words and <span className=\"fs-3\">{text.length}</span> characters\r\n        </p>\r\n        <p>\r\n          <span className=\"fs-3\">\r\n            {0.008 *\r\n              text.split(\" \").filter((element) => {\r\n                return element.length !== 0;\r\n              }).length}{\" \"}\r\n          </span>\r\n          Minutes Read\r\n        </p>\r\n        <h2>Text Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const Capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{Capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from \"./logo.svg\";\n//import axios from \"axios\";\n//import { Component } from \"react/cjs/react.production.min\";\nimport \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./Components/Alert\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const [mode, switchMode] = useState(\"light\");\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      switchMode(\"dark\");\n      document.body.style.backgroundColor = \"#171717\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    } else {\n      switchMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* //Loads Navbar from Navbar function Component */}\n      <Navbar mode={mode} toggleMode={toggleMode} />\n\n      <Alert alert={alert} />\n      <div className=\"container my-4\">\n        <TextForm heading=\"MAGIXT EDITOR\" mode={mode} showAlert={showAlert} />\n      </div>\n      {/* TextInput */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}